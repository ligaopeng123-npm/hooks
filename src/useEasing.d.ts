export declare type EasingType = 'linear' | 'quadraticIn' | 'quadraticOut' | 'quadraticInOut' | 'cubicIn' | 'cubicOut' | 'cubicInOut' | 'quarticIn' | 'quarticOut' | 'quarticInOut' | 'quinticIn' | 'quinticOut' | 'quinticInOut' | 'sinusoidalIn' | 'sinusoidalOut' | 'sinusoidalInOut' | 'exponentialIn' | 'exponentialOut' | 'exponentialInOut' | 'circularIn' | 'circularOut' | 'circularInOut' | 'elasticIn' | 'elasticOut' | 'elasticInOut' | 'backIn' | 'backOut' | 'backInOut' | 'bounceIn' | 'bounceOut' | 'bounceInOut';
export declare const easingFuncs: {
    linear: (k: number) => number;
    quadraticIn: (k: number) => number;
    quadraticOut: (k: number) => number;
    quadraticInOut: (k: number) => number;
    cubicIn: (k: number) => number;
    cubicOut: (k: number) => number;
    cubicInOut: (k: number) => number;
    quarticIn: (k: number) => number;
    quarticOut: (k: number) => number;
    quarticInOut: (k: number) => number;
    quinticIn: (k: number) => number;
    quinticOut: (k: number) => number;
    quinticInOut: (k: number) => number;
    sinusoidalIn: (k: number) => number;
    sinusoidalOut: (k: number) => number;
    sinusoidalInOut: (k: number) => number;
    exponentialIn: (k: number) => number;
    exponentialOut: (k: number) => number;
    exponentialInOut: (k: number) => number;
    circularIn: (k: number) => number;
    circularOut: (k: number) => number;
    circularInOut: (k: number) => number;
    elasticIn: (k: number) => number;
    elasticOut: (k: number) => number;
    elasticInOut: (k: number) => number;
    backIn: (k: number) => number;
    backOut: (k: number) => number;
    backInOut: (k: number) => number;
    bounceIn: (k: number) => number;
    bounceOut: (k: number) => number;
    bounceInOut: (k: number) => number;
};
declare type UseEasingProps = {
    immediate?: boolean;
    duration?: number;
    intervals?: number;
    easingType: EasingType;
};
declare const useEasing: (props: UseEasingProps) => [number, () => void, () => void];
export default useEasing;
